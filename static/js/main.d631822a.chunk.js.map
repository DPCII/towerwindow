{"version":3,"sources":["images/window_logo.png","images/background_tw.jpg","components/Header.js","components/SubjectTab.js","components/ResearchTab.js","components/SearchMenu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","NavHeader","LogoBox","onClick","popnav","Logo","alt","src","window_logo","HeaderTitle","UserNavBox","className","type","sendSelection","styled","nav","img","div","span","SubjectTab","SubjectTabWrapper","ResearchTab","ResearchTabWrapper","SearchMenu","useState","input","setInput","backendRes","setBackendRes","handleSubmit","evt","preventDefault","axios","get","then","result","data","menuView","setMenuView","handleSearchTabs","tab","fill","large","style","buttonsStyle","onSubmit","placeholder","onChange","target","value","length","map","el","index","EachResultContainer","key","resId","vid_player","title","width","EachResultContent","height","EachResultDescription","description","p","App","vid","player","setVid","hide","handleSearchSelection","a","b","setNavStatus","navStatus","cssPropsAnim","useSpring","opacity","marginLeft","playbackReady","event","playVideo","playbackEnd","playbackPause","sheets","document","styleSheets","console","log","display","HomePackage","Home","HomeText","fireplace_background","inlineCss","id","YouTube","videoId","opts","optionsForVideo","onReady","onEnd","onPause","video","autoplay","autoPlay","controls","pausedCss","margin","justifyContent","alignItems","backgroundColor","zIndex","position","right","top","playerVars","modestbranding","rel","iv_load_policy","Boolean","window","location","hostname","match","FocusStyleManager","onlyShowFocusOnTabs","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d631822a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/window_logo.18aaeece.png\";","module.exports = __webpack_public_path__ + \"static/media/background_tw.39ab9f45.jpg\";","import React from 'react'\nimport window_logo from '../images/window_logo.png'\nimport styled from 'styled-components';\nimport { Button } from '@blueprintjs/core';\nimport '../App.css'\n\n// Because views are currently based on videos and whether or not the video player state is empty, the home button just empties the video player state to return us home. This will need refactoring with a proper state manager and router.\n\nexport default function Header(props) {\n    return (\n        <NavHeader>\n            <LogoBox onClick={props.popnav} >\n                <Logo alt=\"window\" src={window_logo}></Logo>\n                <HeaderTitle>Tower Window</HeaderTitle>\n            </LogoBox>\n            <UserNavBox>\n                <Button className=\"bp3-button\" type=\"button\" onClick={() => props.sendSelection('', '')}>Home</Button>\n                <Button className=\"bp3-button\" type=\"button\">User</Button>\n            </UserNavBox>\n        </NavHeader>\n\n\n    )\n}\n\n\nconst NavHeader = styled.nav`\n    height: 57px;\n    width: 100vw;\n    background-color: whitesmoke;\n    box-shadow: .5px .1px 5px .1px gray;\n    margin-bottom: 10px;\n    box-sizing: border-box;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nconst Logo = styled.img`\n    height: 55px;\n    width: auto;\n    position: relative;\n    transform-origin: center right;\n    transform-style: preserve-3d;\n    border-radius: 1px;\n    transform: perspective(400px) rotateY(0deg);\n\n    transition: transform .4s;  \n    &:hover {\n        transform: perspective(400px) rotateY(22deg);\n    }\n`;\n\nconst LogoBox = styled.div`\n    width: 235px;\n    padding: 0px 5px;\n    height: inherit;\n    margin-left: 2rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nconst UserNavBox = styled.div`\n    display: flex;\n    justify-content: space-between;\n    margin: 0 40px 0 10px;\n    height: 30px;\n    width: 110px;\n    margin-left: auto;\n`;\n\n// const Button = styled.div`\n//     font-family: 'Noto Sans', sans-serif;\n//     font-weight: 500;\n//     height: 25px;\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//     padding: 8px;\n//     text-transform: uppercase;\n//     background-color: inherit;\n//     border-radius: 2px;\n\n//     &:hover {\n//         background-color: gainsboro;\n//         cursor: pointer;\n//     }\n// `;\n\nconst HeaderTitle = styled.span`\n    font-size: 1.5rem;\n    /* font-family: 'Noto Sans', sans-serif; */\n    font-weight: 400;\n    padding: 8px;\n    background-color: inherit;\n    border-radius: 2px;\n\n    &:hover {\n        background-color: rgb(240,240,240);\n        cursor: pointer;\n    }\n    \n`;","import React from 'react';\nimport styled from 'styled-components';\n\nexport default function SubjectTab() {\n    return (\n        <SubjectTabWrapper>\n            <p>Subjects here.</p>\n        </SubjectTabWrapper>\n    )\n}\n\nconst SubjectTabWrapper = styled.div`\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n","import React from 'react'\nimport styled from 'styled-components';\n\nexport default function ResearchTab() {\n    return (\n        <ResearchTabWrapper>\n            <p>Research here...</p>\n        </ResearchTabWrapper>\n    )\n}\n\nconst ResearchTabWrapper = styled.div`\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;","import React, { useState } from 'react'\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport { AnchorButton, Button, ButtonGroup } from '@blueprintjs/core';\nimport SubjectTab from './SubjectTab';\nimport ResearchTab from './ResearchTab';\nimport '../App.css'\n\nexport default function SearchMenu(props) {\n    const [input, setInput] = useState('')\n    const [backendRes, setBackendRes] = useState([])\n    \n    const handleSubmit = (evt) => {\n        evt.preventDefault()\n        axios.get(`https://towerwindowheroku.herokuapp.com/?q=${input}`)\n        .then(result => setBackendRes([...result.data]))\n        // .then(() => console.log({backendRes}))\n        // .then(res => console.log(res.data))\n    }\n\n    const [menuView, setMenuView] = useState(0)\n\n    const handleSearchTabs = (tab) => {\n        if(tab === 0) {\n            setMenuView(0)\n        } else if(tab === 1) {\n            setMenuView(1)\n        } else if(tab === 2) {\n            setMenuView(2)\n        }\n    }\n\n\n    function renderSearchMenu() {\n        if(menuView === 0) {\n        return  <div className=\"search-tab\"> {/* This is the Search view*/}\n                        <form onSubmit={handleSubmit}>\n                            <input type=\"search\"\n                            placeholder=\"Search for content by keywords...\"\n                            className=\"search-input\"\n                            onChange={(evt)=>setInput(evt.target.value)}\n                            ></input>\n                        </form>\n                        <div className=\"search-results\">\n                            {\n                                !backendRes.length > 0 ?\n                                (\n                                    // <h3>Search results will show here</h3>\n                                    null\n                                )\n                                :\n                                (\n                                    backendRes.map((el, index) => {\n                                    return <EachResultContainer key={index} onClick={() => {props.sendSelection(el.resId, el.vid_player)}}> \n                                                <h4>{el.title}</h4>\n                                                <hr width=\"100%\" />\n                                                <EachResultContent >\n                                                    <img alt={el.title} src={`http://img.youtube.com/vi/${el.resId}/0.jpg`} height=\"220\"/>\n                                                    <EachResultDescription>{el.description}</EachResultDescription> \n                                                </EachResultContent>\n                                            </EachResultContainer>\n                                        }\n                                    )\n                                )\n                            }\n                        </div>\n                </div> // Above is the Search view\n        } else if(menuView === 1) {\n            return <SubjectTab />\n        } else if(menuView === 2) {\n            return <ResearchTab />\n        }\n    }\n\n\n\n\n        // Here we need to render three or more views: Search, Subjects, and Research\n        // We can create a tab component to switch view state\n\n    return (\n\n        <div className=\"navmenu\">\n            <ButtonGroup fill={true} large={true} style={buttonsStyle}>\n                <Button onClick={() => handleSearchTabs(0)}>Search</Button>\n                <Button onClick={() => handleSearchTabs(1)}>Subjects</Button>\n                <AnchorButton onClick={() => handleSearchTabs(2)}>Research</AnchorButton>\n            </ButtonGroup>\n            {/* <SearchMenuTabs>\n                <span className=\"menu-tab\" onClick={() => handleSearchTabs(0)}>Search</span>\n                <span className=\"menu-tab\" onClick={() => handleSearchTabs(1)}>Subjects</span>\n                <span className=\"menu-tab\" onClick={() => handleSearchTabs(2)}>Research</span>\n            </SearchMenuTabs> */}\n        {renderSearchMenu()}\n\n        </div>\n        \n    )\n}\n\nconst buttonsStyle = {\n    width: \"60%\",\n}\n\nconst EachResultContainer = styled.div`\n    width: 90%;\n    height: auto;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 2rem;\n    border-bottom: 8px solid white;\n`;\n\nconst EachResultContent = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    padding: 1rem;\n`;\n\nconst EachResultDescription = styled.p`\n    padding: 2rem;\n    font-family: 'Montserrat', sans-serif;\n`;\n\nconst SearchMenuTabs = styled.div`\n    height: 40px;\n    width: 100%;\n    display: flex;\n    justify-content: space-evenly;\n    position: absolute;\n    top: 30px;\n`;\n","import React, { useState } from 'react';\nimport YouTube from 'react-youtube';\nimport Vimeo from '@u-wave/react-vimeo';\nimport Header from './components/Header';\nimport SearchMenu from './components/SearchMenu'\nimport styled from 'styled-components';\nimport { useSpring, animated } from 'react-spring';\nimport fireplace_background from './images/background_tw.jpg'\nimport './App.css';\n\nfunction App() {\n\n  // state\n  const [{vid, player}, setVid] = useState({ \n    vid: '',\n    player: \"\"\n  });\n  const [hide, setHide] = useState({ hide: false })\n  // state\n\n  // Handler for selecting option from Searchmenu. Also collapses the search menu.\n\n  const handleSearchSelection = (a, b) => {\n    setVid({vid: a, player: b}) \n    setNavStatus(a => !a)\n  }\n  //\n\n\n\n  // React Spring for navmenu\n  const [navStatus, setNavStatus] = useState(false);\n\n  const cssPropsAnim = useSpring({\n    opacity: navStatus ? 1 : .5,\n    marginLeft: navStatus ? 0 : -1200,\n  })\n\n  const handleNavClick = () => setNavStatus(a => !a)\n  // React Spring\n\n  \n  // start and stop functions\n  function playbackReady(event) {\n    // event.target.pauseVideo();\n    event.target.playVideo();\n\n  }\n  function playbackEnd(event) {\n    setVid('')\n    setNavStatus(a => !a)\n  }\n  // start and stop\n\n\n\n  // play state allows us to determine whether or not popup ads should be killed\n  function playbackPause(event) {\n    let sheets = document.styleSheets;\n    console.log(sheets)\n    // togglePlayState()\n    // console.log(grabWindow)\n  }\n\n  // function playbackPlay(event) {\n  //   togglePlayState()\n  // }\n\n  // function togglePlayState() {\n  //   hide ? setHide(false) : setHide(true)\n  // }\n  // play state\n  \n  // let grabWindow;\n\n  // renderWhichPlayer checks API response for which platform the video is coming from\n  function renderWhichPlayer() {\n    if(player === \"youtube\") {\n      return  <div style={inlineCss} id=\"player\">\n                  <YouTube \n                    videoId= { vid }\n                    opts={optionsForVideo}\n                    onReady={playbackReady}\n                    onEnd={playbackEnd}\n                    onPause={playbackPause}\n                    // onPlay={playbackPlay}\n                    // ref={\n                    //   function(el) {\n                    //     grabWindow = el\n                    //   }\n                    // }\n                  />\n\n              </div>\n    } else if(player === \"vimeo\") {\n      return <div style={inlineCss} id=\"player\">\n                <Vimeo\n                  video={ vid }\n                  onEnd={playbackEnd}\n                  width=\"640\"\n                  height=\"390\"\n                  autoplay\n                />\n              </div>\n    } else if(player === \"national archives\") {\n      return <div style={inlineCss} id=\"player\">\n                <video width=\"640\" autoPlay controls>\n                  <source src={ vid } type=\"video/mp4\" />\n                  <source src={ vid } type=\"video/ogg\" />\n                  {\"Your browser does not support HTML5 video.\"}\n                </video>\n            </div>\n    }\n  }\n\n  const HomePackage = \n  <Home>\n    <h3>Welcome to Tower Window</h3>\n    <HomeText>\n      Our goal is to reference quality content across all domains of interest with as little impact from behavior modifying algorithms as possible. Click on the title at the top left to get started.\n    </HomeText>\n    <img alt=\"reading by the fireplace\" src={fireplace_background} height=\"125px\"></img>\n  </Home>\n\n\n  let display;\n\n  if(!hide) {\n     display = <div style={pausedCss}>\n                  Paused\n                </div>\n  } else {\n    display = <div>\n                {renderWhichPlayer() || {...HomePackage}}\n              </div>\n\n  }\n\n  // renderWhichPlayer\n\n// determines which type of content should be played. If no content is playing, can reopen nav bar\n  return ( \n    <div>\n        <Header popnav={handleNavClick} sendSelection={handleSearchSelection}></Header>\n        { // Spring animation for side sliding nav \n          !navStatus ?\n          (\n            null\n          )\n          :\n          (\n            <animated.div className=\"navmenu\" style={ cssPropsAnim }>\n              <SearchMenu sendSelection={handleSearchSelection}></SearchMenu>\n            </animated.div>\n          )\n        }  \n\n\n        {display}\n\n\n\n    </div>\n  );\n\n}\n\nexport default App;\n\nconst Home = styled.div`\n  height: 70vh;\n  width: 70vw;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n  padding: 10px;\n  /* background-color: green; */\n  margin: 0 auto;\n  font-family: 'Montserrat', sans-serif;\n  padding: 4rem 0 0 0;\n`;\n\nconst HomeText = styled.p`\n  height: auto;\n  width: 40vw;\n  font-family: 'Montserrat', sans-serif;\n  font-size: 14px;\n`;\n\n// temp storage of CSS\nconst inlineCss = {\n  height: \"500px\",\n  width: \"700px\",\n  margin: \"0 auto\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  backgroundColor: \"white\"\n}\n\nconst pausedCss = {\n  height: \"500px\",\n  width: \"725px\",\n  margin: \"0 auto\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  backgroundColor: \"blue\",\n  zIndex: \"1\",\n  position: \"absolute\",\n  right: \"350px\",\n  top: \"0\"\n}\n\n  // video size for YouTube npm package\n  let optionsForVideo =  {\n    height: '390',\n    width: '640',\n    playerVars: {\n      modestbranding: 1,\n      rel: 0,\n      iv_load_policy: 3,\n      'ytp-pause-overlay': '0',\n    }\n  }\n  //","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport 'normalize.css'\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport { FocusStyleManager } from \"@blueprintjs/core\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nFocusStyleManager.onlyShowFocusOnTabs();\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}